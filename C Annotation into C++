//The head file

#ifndef  __COMMENT_CONVERT_H__
#define  __COMMENT_CONVERT_H__

#include<stdio.h>
#include<stdlib.h>

typedef enum CONVERT_STATE
{
	NULL_STATE,
	C_STATE,
	CPP_STATE,
	END_STATE,
}StateType;

#define INPUTFILENAME  "input.c"
#define OUTPUTFILENAME "output.c"

void CommentConvert();
void ConvertWork(FILE *read, FILE *write);
void DoCState(FILE *read, FILE *write);
void DoNullState(FILE *read, FILE *write);
void DoCppState(FILE *read, FILE *write);

#endif







//The function

#define _CRT_SECURE_NO_WARNINGS 1
#include"CommentConvert.h"

StateType state;

void DoNullState(FILE *read, FILE *write)
{
	int first = fgetc(read);
	int second = 0;
	switch (first)
	{
		case '/':
			second = fgetc(read);
			if (second == '*')
			{
				fputc(first, write);
				fputc('/', write);
				state = C_STATE;
			}
			else if (second == '/')
			{
				fputc(first, write);
				fputc('/', write);
				state = CPP_STATE;
			}
			else
			{
				fputc(first, write);
				fputc(second, write);
			}
		    break;
		case EOF:
			fputc(first, write);
			state = END_STATE;
			break;
	    default:
			fputc(first, write);
			break;
	}
}

void DoCState(FILE *read, FILE *write)
{
	int first = fgetc(read);
	int second = 0;
	switch (first)
	{
	case '/':
		second = fgetc(read);
		if (second == '*')
		{
		}
		else if (second == '/')
		{
		}
		else
		{
			fputc(first, write);
			fputc(second, write);
		}
		break;
	case '\n':
		fputc('\n', write);
		fputc('/',write);
		fputc('/', write);
		break;
	case '*':
		second = fgetc(read);
		if (second == '*')
		{
			fputc(first, write);
			first=fgetc(read);
			if (first == '/')
			{
				fputc('\n', write);
				state = NULL_STATE;
			}
		}
		else if (second == '/')
		{
			fputc('\n', write);
			state = NULL_STATE;
		}
		else
		{
			fputc(first, write);
			fputc(second, write);
		}
		break;
	case EOF:
			fputc(first, write);
			state = END_STATE;
			break;
	default:
			fputc(first, write);
			break;
	}
}

void DoCppState(FILE *read, FILE *write)
{
	int first = fgetc(read);
	int second = 0;
		switch (first)
		{
		case '/':
			second = fgetc(read);
			if (second == '*')
			{
			}
			else if (second == '/')
			{
			}
			else
			{
				fputc(first, write);
				fputc(second, write);
			}
			break;
		case '\n':
			fputc(first, write);
			state = NULL_STATE;
			break;
		case '*':
			second = fgetc(read);
			if (second == '/')
			{
			}
			else
			if (second == '*')
			{
				fputc(first, write);
			}
			break;
	    case EOF:
			 fputc(first, write);
			 state = END_STATE;
			 break;
	   default:
			  fputc(first, write);
			  break;
		}
}

void ConvertWork(FILE *pRead, FILE *pWrite)
{
	 state = NULL_STATE;

	while (state != END_STATE)
	{
		switch (state)
		{
		case NULL_STATE:
			DoNullState(pRead, pWrite);
			break;
		case C_STATE:
			DoCState(pRead, pWrite);
			break;
		case CPP_STATE:
			DoCppState(pRead, pWrite);
			break;
		}
	}
}

void CommentConvert()
{
	 FILE *pWrite=NULL;	
	 FILE *pRead = fopen("input.c", "r");
	if (pRead == NULL)
	{
		perror("open file for read");
		exit(EXIT_FAILURE);
	}
	pWrite = fopen("output.c", "w");
	if (pWrite == NULL)
	{
		fclose(pRead);
		perror("open file for write");
		exit(EXIT_FAILURE);
	}
	ConvertWork(pRead, pWrite);
	fclose(pRead);
	fclose(pWrite);
}





//The test


#include<stdio.h>

void test()
{
	CommentConvert();
}
int main()
{
	test();
	return 0;
}
